#!/usr/bin/env node
require('dotenv-safe').load();
// mongoose.connect('mongodb://user:password@sample.com:port/dbname', { useNewUrlParser: true })
const mongoClient = require("mongodb").MongoClient;
// mongoClient.connect(process.env.MONGO_CONNECTION, { useNewUrlParser: true }, function(err, conn){
mongoClient.connect("mongodb://galhardo:galhardo159@ds139879.mlab.com:39879/heroku_45pspqs1", { useNewUrlParser: true }, function(err, conn){
  if(err) { return console.log(err); }

  console.log("conectou no banco de dados!");
  global.db = conn.db(process.env.MONGO_DB);
  //coloque todo o cÃ³digo antigo do www aqui dentro
    /**
   * Module dependencies.
   */

  var app = require('../app');
  var debug = require('debug')('autenticacao:server');
  var http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }


})

